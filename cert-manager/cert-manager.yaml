#
# Cert-Manager
#
# GitHub: https://github.com/jetstack/cert-manager/
# All chart values: https://github.com/jetstack/cert-manager/blob/master/deploy/charts/cert-manager/values.yaml
#

repositories:
- name: cert-manager
  url: https://charts.jetstack.io

  # Kubernetes incubator repo of helm charts
- name: "kubernetes-incubator"
  url: "https://charts.helm.sh/incubator"


# TODO: not sure why this lables aren't included in all the resources !!! :-(
commonLabels:
  component: "cert-manager"
  vendor: "jetstack"
  team: devops
  group: internal-tools

releases:
  # name of this release
- name: "cert-manager"
  # target namespace
  namespace: "cert-manager"
  # the chart being installed to create this release, referenced by `repository/chart` syntax
  chart: "cert-manager/cert-manager"
  # the semver of the chart. range constraint is supported
  version: {{ env "CERT_MANAGER_CHART_VERSION" | default "1.3.x" }}
  # wait for k8s resources via --wait. (default false)
  wait: true
  # time in seconds to wait for any individual Kubernetes operation (like Jobs for hooks, and waits on pod/pvc/svc/deployment readiness) (default 300)
  timeout: 300
  # set `false` to uninstall this release on sync.  (default true)
  installed:  true
  # helm 3.2+ automatically create release namespace (default
  createNamespace: true
  # restores previous state in case of failed release (default false)
  atomic: true
  # when true, cleans up any new resources created during a failed release (default false)
  cleanupOnFail: true

  # 
  hooks:
  - events: ["presync"]
    showlogs: true
    command: "/bin/sh"
    args:
    - "-c"
    - >-
      [[ "{{`{{ .Release.Namespace }}`}}" = "cert-manager" ]] && [[ -n "${CERT_MANAGER_IAM_ROLE}" ]]
      && kubectl annotate namespace "{{`{{ .Release.Namespace }}`}}" "iam.amazonaws.com/permitted=.*${CERT_MANAGER_IAM_ROLE}$"
      || echo + Not annotating namespace "{{`{{ .Release.Namespace }}`}}" with "iam.amazonaws.com/permitted=.*${CERT_MANAGER_IAM_ROLE}$"
  - events: ["postsync"]
    # Give cert-manager time to initialize itself
    showlogs: true
    command: "/bin/sleep"
    args: ["15"]

  values:

      # Default values for cert-manager.
      # This is a YAML-formatted file.
      # Declare variables to be passed into your templates.
    - global:
        # Set the verbosity of cert-manager. Range of 0 - 6 with 6 being the most verbose.
        logLevel: 2

      # Install the CRD by default
      installCRDs: true

      # Pod resources
      resources:
        limits:
          cpu: '{{ env "CERT_MANAGER_LIMIT_CPU" | default "200m" }}'
          memory: '{{ env "CERT_MANAGER_LIMIT_MEMORY" | default "256Mi" }}'
        requests:
          cpu: '{{ env "CERT_MANAGER_REQUEST_CPU" | default "50m" }}'
          memory: '{{ env "CERT_MANAGER_REQUEST_MEMORY" | default "128Mi" }}'

      # Optional additional annotations to add to the controller Pods
      # podAnnotations: {}
      {{- if env "CERT_MANAGER_IAM_ROLE" | default "" }}
      podAnnotations:
        ### Required: EXTERNAL_DNS_IAM_ROLE; e.g. cp-staging-external-dns
        iam.amazonaws.com/role: '{{ env "CERT_MANAGER_IAM_ROLE" }}'
        # DD autodiscovery annotations
        ad.datadoghq.com/spoton-cm.check_names: '["cert_manager"]'
        ad.datadoghq.com/spoton-cm.init_configs: '[{}]'
        ad.datadoghq.com/spoton-cm.instances: '[{"prometheus_url":"http://%%host%%:9402/metrics"]'
      {{- end }}

      ingressShim:
        ### Optional: CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_NAME;
        defaultIssuerName: '{{ env "CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_NAME" | default "letsencrypt-staging" }}'
        ### Optional: CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_KIND;
        defaultIssuerKind: '{{ env "CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_KIND" | default "ClusterIssuer" }}'

      prometheus:
        enabled: {{ env "CERT_MANAGER_METRICS_ENABLED" | default (env "METRICS_ENABLED") | default "false" }}
        servicemonitor:
          enabled: {{ env "CERT_MANAGER_METRICS_ENABLED" | default (env "METRICS_ENABLED") | default "false" }}

      webhook:
        serviceAccount:
          # Specifies whether a service account should be created
          # Optional: RBAC_ENABLED;
          create: {{ env "RBAC_ENABLED" | default "false" }}


- name: 'cert-manager-issuers'
  needs: ['cert-manager/cert-manager']
  chart: "kubernetes-incubator/raw"
  namespace: "cert-manager"
  labels:
    component: "cert-manager"
    namespace: "cert-manager"
    default: "true"
  version: "0.2.3"
  wait: true
  atomic: true
  cleanupOnFail: true
  installed: {{ env "CERT_MANAGER_INSTALLED" | default "true" }}
  disableValidation: true
  values:
  - resources:
    - apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-staging
      spec:
        acme:
          # The ACME server URL
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          # Email address used for ACME registration
          email: {{ coalesce (env "CERT_MANAGER_EMAIL") (env "KUBE_LEGO_EMAIL") "user@example.com" }}
          # Name of a secret used to store the ACME account private key
          privateKeySecretRef:
            name: letsencrypt-staging
          solvers:
            {{- if env "CERT_MANAGER_HTTP_SOLVER_ENABLED" | default "" }}
            # Enable the HTTP-01 challenge provider
            - http01:
                ingress:
                  class: nginx
            {{- end }}
            {{- if env "CERT_MANAGER_IAM_ROLE" | default "" }}
            # Enable the DNS-01 challenge provider
            - dns01:
                route53:
                  region: {{ env "AWS_REGION" | default (env "AWS_DEFAULT_REGION") }}
            {{- end }}
    - apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          # The ACME server URL
          server: https://acme-v02.api.letsencrypt.org/directory
          # Email address used for ACME registration
          email: {{ coalesce (env "CERT_MANAGER_EMAIL") (env "KUBE_LEGO_EMAIL") "user@example.com" }}
          # Name of a secret used to store the ACME account private key
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
            {{- if env "CERT_MANAGER_HTTP_SOLVER_ENABLED" | default "" }}
            # Enable the HTTP-01 challenge provider
            - http01:
                ingress:
                  class: nginx
            {{- end }}
            {{- if env "CERT_MANAGER_IAM_ROLE" | default "" }}
            # Enable the DNS-01 challenge provider
            - dns01:
                route53:
                  region: {{ env "AWS_REGION" | default (env "AWS_DEFAULT_REGION") }}
            {{- end }}
